ggplot() +
geom_bar(data=out, mapping=aes(out), geom='bar')
out <- d[order(aa, decreasing=T),] %>%
select(Word, id, Def) %>%
cbind(score = sort(aa,decreasing = T)) %>%
filter(score > 0)
res <- out %>% head(15)
m <- data.frame(min=min(res$score))
ggplot() +
geom_bar(data=out, mapping=aes(out), geom='bar') +
geom_vline(data=m, aes(xintercept=min), color='red')
ggplot() +
geom_bar(data=out, mapping=aes(out), geom='bar')
ggplot(out) +
geom_bar(mapping=aes(out), geom='bar') +
geom_vline(data=m, aes(xintercept=min), color='red')
ggplot(out) +
geom_bar(mapping=aes(out), geom='bar')
ggplot() +
geom_bar(data=out, mapping=aes(out)) +
geom_vline(data=res, aes(xintercept=min(score)), color='red')
ggplot() +
geom_bar(data=out, mapping=aes(out)) +
ggplot() +
geom_bar(data=out, mapping=aes(out))
ggplot() +
geom_bar(data=out, mapping=aes(x=out))
ggplot() +
geom_bar(data=out, mapping=aes(x=score)) +
geom_vline(data=res, aes(xintercept=min(score)), color='red')
ggplot() +
geom_bar(data=out, mapping=aes(x=score), binwidth=range/30) +
geom_vline(data=res, aes(xintercept=min(score)), color='red')
ggplot() +
geom_bar(data=out, mapping=aes(x=score), binwidth=..range../30) +
geom_vline(data=res, aes(xintercept=min(score)), color='red')
ggplot() +
geom_bar(data=out, mapping=aes(x=score)) +
geom_vline(data=res, aes(xintercept=min(score)), color='red')
View(res)
query.vec.1 <- TermDocumentMatrix(Corpus(VectorSource('delicious food')),
control = list(dictionary = dictionary,wordLengths=c(1, Inf)))
query.vec.norm <- as.matrix(query.vec.1)/sqrt(sum(query.vec.1^2))
#query.vec.norm <- weightSMART(query.vec.1, spec='ntc', control = list(dictionary = dictionary))
aa <- t(mat.1)%*%query.vec.norm
out <- d[order(aa, decreasing=T),] %>%
select(Word, id, Def) %>%
cbind(score = sort(aa,decreasing = T)) %>%
filter(score > 0)
res <- out %>% head(15)
m <- data.frame(min=min(res$score))
ggplot() +
geom_bar(data=out, mapping=aes(x=score)) +
geom_vline(data=res, aes(xintercept=min(score)), color='red')
View(res)
query.vec.1 <- TermDocumentMatrix(Corpus(VectorSource('food')),
control = list(dictionary = dictionary,wordLengths=c(1, Inf)))
query.vec.norm <- as.matrix(query.vec.1)/sqrt(sum(query.vec.1^2))
#query.vec.norm <- weightSMART(query.vec.1, spec='ntc', control = list(dictionary = dictionary))
aa <- t(mat.1)%*%query.vec.norm
out <- d[order(aa, decreasing=T),] %>%
select(Word, id, Def) %>%
cbind(score = sort(aa,decreasing = T)) %>%
filter(score > 0)
res <- out %>% head(15)
m <- data.frame(min=min(res$score))
ggplot() +
geom_bar(data=out, mapping=aes(x=score)) +
geom_vline(data=res, aes(xintercept=min(score)), color='red')
query.vec.1 <- TermDocumentMatrix(Corpus(VectorSource('the')),
control = list(dictionary = dictionary,wordLengths=c(1, Inf)))
query.vec.norm <- as.matrix(query.vec.1)/sqrt(sum(query.vec.1^2))
#query.vec.norm <- weightSMART(query.vec.1, spec='ntc', control = list(dictionary = dictionary))
aa <- t(mat.1)%*%query.vec.norm
out <- d[order(aa, decreasing=T),] %>%
select(Word, id, Def) %>%
cbind(score = sort(aa,decreasing = T)) %>%
filter(score > 0)
res <- out %>% head(15)
m <- data.frame(min=min(res$score))
ggplot() +
geom_bar(data=out, mapping=aes(x=score)) +
geom_vline(data=res, aes(xintercept=min(score)), color='red')
View(res)
query.vec.1 <- TermDocumentMatrix(Corpus(VectorSource('a')),
control = list(dictionary = dictionary,wordLengths=c(1, Inf)))
query.vec.norm <- as.matrix(query.vec.1)/sqrt(sum(query.vec.1^2))
#query.vec.norm <- weightSMART(query.vec.1, spec='ntc', control = list(dictionary = dictionary))
aa <- t(mat.1)%*%query.vec.norm
out <- d[order(aa, decreasing=T),] %>%
select(Word, id, Def) %>%
cbind(score = sort(aa,decreasing = T)) %>%
filter(score > 0)
res <- out %>% head(15)
m <- data.frame(min=min(res$score))
ggplot() +
geom_bar(data=out, mapping=aes(x=score)) +
geom_vline(data=res, aes(xintercept=min(score)), color='red')
query.vec.1 <- TermDocumentMatrix(Corpus(VectorSource('because')),
control = list(dictionary = dictionary,wordLengths=c(1, Inf)))
query.vec.norm <- as.matrix(query.vec.1)/sqrt(sum(query.vec.1^2))
#query.vec.norm <- weightSMART(query.vec.1, spec='ntc', control = list(dictionary = dictionary))
aa <- t(mat.1)%*%query.vec.norm
out <- d[order(aa, decreasing=T),] %>%
select(Word, id, Def) %>%
cbind(score = sort(aa,decreasing = T)) %>%
filter(score > 0)
res <- out %>% head(15)
m <- data.frame(min=min(res$score))
ggplot() +
geom_bar(data=out, mapping=aes(x=score)) +
geom_vline(data=res, aes(xintercept=min(score)), color='red')
View(res)
idx_top <- order(aa, decreasing=T)
head(idx_top)
which(idx_top == 1)
order(c(3,1,5,2,5), decreasing = T)
order(c(3,1,5,2,5), decreasing = T)
order(c('b','d','a','g'), decreasing = T)
order(c(3,1,5,2,5), decreasing = T)
order(c(3,1,5,2,10), decreasing = T)
order(c(3,1,5,2,10), decreasing = T)
c(3,1,5,2,10)[order(c(3,1,5,2,10), decreasing = T)]
View(res)
dictionary[idx_top[1]]
colnames[idx_top[1]]
colnames(tdm.1)[idx_top[1]]
idx_top
idx_top[1]
idx_top[1]
v.20733 <- mat.1[,20733]
v.q <- query.vec.norm
v <- v.20733*v.q
length(v)
top_contrib <- order(v, decreasing = T)
top_contrib
top_contrib[1]
dictionary[top_contrib[1]]
rownames(tdm.1)[top_contrib[1]]
tdm.1$dimnames$Terms[top_contrib[1]]
dictionary[top_contrib[1]]
mat.1 <- sparseMatrix(i=tdm.1$i, j=tdm.1$j, x = tdm.1$v)
dictionary <- tdm.1$dimnames$Terms
query.vec.1 <- TermDocumentMatrix(Corpus(VectorSource('because')),
control = list(dictionary = dictionary,wordLengths=c(1, Inf)))
query.vec.norm <- as.matrix(query.vec.1)/sqrt(sum(query.vec.1^2))
#query.vec.norm <- weightSMART(query.vec.1, spec='ntc', control = list(dictionary = dictionary))
aa <- t(mat.1)%*%query.vec.norm
idx_top <- order(aa, decreasing=T)
out <- d[idx_top,] %>%
select(Word, id, Def) %>%
cbind(score = sort(aa,decreasing = T)) %>%
filter(score > 0)
res <- out %>% head(15)
m <- data.frame(min=min(res$score))
# Estadísticas. Son sobresalientes las palabras que mostramos?
ggplot() +
geom_bar(data=out, mapping=aes(x=score)) +
geom_vline(data=res, aes(xintercept=min(score)), color='red')
idx_top <- order(aa, decreasing=T)
aa <- t(mat.1)%*%query.vec.norm
aa
tdm.1 <- TermDocumentMatrix(corp.2, control=list(wordLengths=c(1, Inf),
stopwords = TRUE,
weighting = function(x) weightSMART(x, spec = "ntc")))
colnames(tdm.1) <- paste(d$Word, d$id, sep='_')
colnames(tdm.1) <- paste(d$Word, d$id, sep='_')
sum(rownames(tdm.1) == 'fish-tackle')
head(sort(vec.1 <- as.matrix(tdm.1[,'action_1']),dec=T))
mat.1 <- sparseMatrix(i=tdm.1$i, j=tdm.1$j, x = tdm.1$v)
dictionary <- tdm.1$dimnames$Terms
query.vec.1 <- TermDocumentMatrix(Corpus(VectorSource('because')),
control = list(dictionary = dictionary,wordLengths=c(1, Inf)))
query.vec.norm <- as.matrix(query.vec.1)/sqrt(sum(query.vec.1^2))
#query.vec.norm <- weightSMART(query.vec.1, spec='ntc', control = list(dictionary = dictionary))
aa <- t(mat.1)%*%query.vec.norm
aa
query.vec.norm
mat.1 <- sparseMatrix(i=tdm.1$i, j=tdm.1$j, x = tdm.1$v)
dictionary <- tdm.1$dimnames$Terms
query.vec.1 <- TermDocumentMatrix(Corpus(VectorSource('because')),
control = list(dictionary = dictionary,wordLengths=c(1, Inf)))
query.vec.1
query.vec.1 <- TermDocumentMatrix(Corpus(VectorSource('the sun')),
control = list(dictionary = dictionary,wordLengths=c(1, Inf)))
query.vec.1
query.vec.norm <- as.matrix(query.vec.1)/sqrt(sum(query.vec.1^2))
aa <- t(mat.1)%*%query.vec.norm
head(dictionary)
head(dictionary,100)
head(dictionary,1000)
corp.1 <- tm_map(corpus.frases,  function(x){
gsub('--|[«»\\\',;:".!¡¿?\\(\\)\\[\\]&0-9\\*#/]|<br>','',x)
})
corp.2 <- tm_map(corp.1, function(x) stripWhitespace(x) %>% tolower %>% PlainTextDocument)
tdm.1 <- TermDocumentMatrix(corp.2, control=list(wordLengths=c(1, Inf)))
tdm.2 <- weightSMART(tdm.2, spec = 'ntc')
colnames(tdm.2) <- paste(d$Word, d$id, sep='_')
mat.1 <- sparseMatrix(i=tdm.2$i, j=tdm.2$j, x = tdm.2$v)
dictionary <- tdm.2$dimnames$Terms
query.vec.1 <- TermDocumentMatrix(Corpus(VectorSource('the sun')),
control = list(dictionary = dictionary,wordLengths=c(1, Inf)))
query.vec.norm <- as.matrix(query.vec.1)/sqrt(sum(query.vec.1^2))
#query.vec.norm <- weightSMART(query.vec.1, spec='ntc', control = list(dictionary = dictionary))
aa <- t(mat.1)%*%query.vec.norm
# Output del query
idx_top <- order(aa, decreasing=T)
out <- d[idx_top,] %>%
select(Word, id, Def) %>%
cbind(score = sort(aa,decreasing = T)) %>%
filter(score > 0)
res <- out %>% head(15)
m <- data.frame(min=min(res$score))
# Estadísticas. Son sobresalientes las palabras que mostramos?
ggplot() +
geom_bar(data=out, mapping=aes(x=score)) +
geom_vline(data=res, aes(xintercept=min(score)), color='red')
View(res)
query.vec.1 <- TermDocumentMatrix(Corpus(VectorSource('because')),
control = list(dictionary = dictionary,wordLengths=c(1, Inf)))
query.vec.norm <- as.matrix(query.vec.1)/sqrt(sum(query.vec.1^2))
#query.vec.norm <- weightSMART(query.vec.1, spec='ntc', control = list(dictionary = dictionary))
aa <- t(mat.1)%*%query.vec.norm
# Output del query
idx_top <- order(aa, decreasing=T)
out <- d[idx_top,] %>%
select(Word, id, Def) %>%
cbind(score = sort(aa,decreasing = T)) %>%
filter(score > 0)
res <- out %>% head(15)
m <- data.frame(min=min(res$score))
# Estadísticas. Son sobresalientes las palabras que mostramos?
ggplot() +
geom_bar(data=out, mapping=aes(x=score)) +
geom_vline(data=res, aes(xintercept=min(score)), color='red')
View(res)
colnames(tdm.2)[idx_top[1]]
idx_top[1]
v.20733 <- mat.1[,20733]
v.q <- query.vec.norm
v <- v.20733*v.q
length(v)
top_contrib <- order(v, decreasing = T)
dictionary[top_contrib[1]] # tdm.2$dimnames$Terms[top_contrib[1]]
tdm.2$dimnames$Terms[top_contrib[1]]
query.vec.1 <- TermDocumentMatrix(Corpus(VectorSource('i eat delicuous food')),
control = list(dictionary = dictionary,wordLengths=c(1, Inf)))
query.vec.norm <- as.matrix(query.vec.1)/sqrt(sum(query.vec.1^2))
#query.vec.norm <- weightSMART(query.vec.1, spec='ntc', control = list(dictionary = dictionary))
aa <- t(mat.1)%*%query.vec.norm
# Output del query
idx_top <- order(aa, decreasing=T)
out <- d[idx_top,] %>%
select(Word, id, Def) %>%
cbind(score = sort(aa,decreasing = T)) %>%
filter(score > 0)
res <- out %>% head(15)
m <- data.frame(min=min(res$score))
# Estadísticas. Son sobresalientes las palabras que mostramos?
ggplot() +
geom_bar(data=out, mapping=aes(x=score)) +
geom_vline(data=res, aes(xintercept=min(score)), color='red')
View(res)
v.j <- mat.1[,idx_top[1]]
v.q <- query.vec.norm
v <- v.j*v.q
length(v)
top_contrib <- order(v, decreasing = T)
dictionary[top_contrib[1]]
top_contrib[1:5]
dictionary[top_contrib[1:5]] # tdm.2$dimnames$Terms[top_contrib[1]]
View(res)
data.frame(term=dictionary[top_contrib[1:5]], # tdm.2$dimnames$Terms[top_contrib[1]]
score_contrib=v[top_contrib[1:5]])
query.vec.1 <- TermDocumentMatrix(Corpus(VectorSource('i eat delicious food')),
control = list(dictionary = dictionary,wordLengths=c(1, Inf)))
query.vec.norm <- as.matrix(query.vec.1)/sqrt(sum(query.vec.1^2))
#query.vec.norm <- weightSMART(query.vec.1, spec='ntc', control = list(dictionary = dictionary))
aa <- t(mat.1)%*%query.vec.norm
# Output del query
idx_top <- order(aa, decreasing=T)
out <- d[idx_top,] %>%
select(Word, id, Def) %>%
cbind(score = sort(aa,decreasing = T)) %>%
filter(score > 0)
res <- out %>% head(15)
m <- data.frame(min=min(res$score))
# Estadísticas. Son sobresalientes las palabras que mostramos?
ggplot() +
geom_bar(data=out, mapping=aes(x=score)) +
geom_vline(data=res, aes(xintercept=min(score)), color='red')
View(res)
# Qué palabras contribuyeron más al match?
colnames(tdm.2)[idx_top[1]]
idx_top[1]
v.j <- mat.1[,idx_top[1]]
v.q <- query.vec.norm
v <- v.j*v.q
length(v)
top_contrib <- order(v, decreasing = T)
data.frame(term=dictionary[top_contrib[1:5]], # tdm.2$dimnames$Terms[top_contrib[1]]
score_contrib=v[top_contrib[1:5]])
which(v!=0)
which(v.j!=0)
View(res)
which(v.q!=0)
v
dim(v)
dim(v != 0)
which(v != 0)
which(v[,1] != 0)
which(v[,1] != 0)
as.numericv
as.numeric(v)
which(as.numeric(v) != 0)
data.frame(term=dictionary[top_contrib[1:5]], # tdm.2$dimnames$Terms[top_contrib[1]]
score_contrib=v[top_contrib[1:5]]) %>%
filter(score_contrib > 0)
colnames(tdm.2)[idx_top[2]]
idx_top[1]
v.j <- mat.1[,idx_top[1]]
v.q <- query.vec.norm
v <- v.j*v.q
length(v)
top_contrib <- order(v, decreasing = T)
data.frame(term=dictionary[top_contrib[1:5]], # tdm.2$dimnames$Terms[top_contrib[1]]
score_contrib=v[top_contrib[1:5]]) %>%
filter(score_contrib > 0)
query.vec.1 <- TermDocumentMatrix(Corpus(VectorSource('solid liquid food')),
control = list(dictionary = dictionary,wordLengths=c(1, Inf)))
query.vec.norm <- as.matrix(query.vec.1)/sqrt(sum(query.vec.1^2))
#query.vec.norm <- weightSMART(query.vec.1, spec='ntc', control = list(dictionary = dictionary))
aa <- t(mat.1)%*%query.vec.norm
# Output del query
idx_top <- order(aa, decreasing=T)
out <- d[idx_top,] %>%
select(Word, id, Def) %>%
cbind(score = sort(aa,decreasing = T)) %>%
filter(score > 0)
res <- out %>% head(15)
m <- data.frame(min=min(res$score))
# Estadísticas. Son sobresalientes las palabras que mostramos?
ggplot() +
geom_bar(data=out, mapping=aes(x=score)) +
geom_vline(data=res, aes(xintercept=min(score)), color='red')
View(res)
n <- 1
colnames(tdm.2)[idx_top[n]]
idx_top[n]
v.j <- mat.1[,idx_top[n]]
v.q <- query.vec.norm
v <- v.j*v.q
length(v)
top_contrib <- order(v, decreasing = T)
data.frame(term=dictionary[top_contrib[1:5]], # tdm.2$dimnames$Terms[top_contrib[1]]
score_contrib=v[top_contrib[1:5]]) %>%
filter(score_contrib > 0)
n <- 2
colnames(tdm.2)[idx_top[n]]
idx_top[n]
v.j <- mat.1[,idx_top[n]]
v.q <- query.vec.norm
v <- v.j*v.q
length(v)
top_contrib <- order(v, decreasing = T)
data.frame(term=dictionary[top_contrib[1:5]], # tdm.2$dimnames$Terms[top_contrib[1]]
score_contrib=v[top_contrib[1:5]]) %>%
filter(score_contrib > 0)
n <- 3
colnames(tdm.2)[idx_top[n]]
idx_top[n]
v.j <- mat.1[,idx_top[n]]
v.q <- query.vec.norm
v <- v.j*v.q
length(v)
top_contrib <- order(v, decreasing = T)
data.frame(term=dictionary[top_contrib[1:5]], # tdm.2$dimnames$Terms[top_contrib[1]]
score_contrib=v[top_contrib[1:5]]) %>%
filter(score_contrib > 0)
best
best <- function(nmatch = 3, nterm = 5){
v.q <- query.vec.norm
outlist <- list()
for(i in 1:nmatch){
#colnames(tdm.2)[idx_top[i]]
#idx_top[nmatch]
v.j <- mat.1[,idx_top[i]]
v <- v.j*v.q
#length(v)
top_contrib <- order(v, decreasing = T)
outlist[[i]] <- data.frame(term=dictionary[top_contrib[1:nterm]], # tdm.2$dimnames$Terms[top_contrib[1]]
score_contrib=v[top_contrib[1:nterm]]) %>%
filter(score_contrib > 0) %>%
cbind(rank = i)
}
rbind_all(outlist)
}
best()
best <- function(nmatch = 3, nterm = 5){
v.q <- query.vec.norm
outlist <- list()
for(i in 1:nmatch){
#colnames(tdm.2)[idx_top[i]]
#idx_top[nmatch]
v.j <- mat.1[,idx_top[i]]
v <- v.j*v.q
#length(v)
top_contrib <- order(v, decreasing = T)
outlist[[i]] <- data.frame(term=dictionary[top_contrib[1:nterm]], # tdm.2$dimnames$Terms[top_contrib[1]]
score_contrib=v[top_contrib[1:nterm]], stringsAsFactors=F) %>%
filter(score_contrib > 0) %>%
cbind(rank = i)
}
rbind_all(outlist)
}
best()
colnames(tdm.2)[idx_top[i]]
best <- function(nmatch = 3, nterm = 5){
v.q <- query.vec.norm
outlist <- list()
for(i in 1:nmatch){
#colnames(tdm.2)[idx_top[i]]
#idx_top[nmatch]
v.j <- mat.1[,idx_top[i]]
v <- v.j*v.q
#length(v)
top_contrib <- order(v, decreasing = T)
outlist[[i]] <- data.frame(term=dictionary[top_contrib[1:nterm]], # tdm.2$dimnames$Terms[top_contrib[1]]
score_contrib=v[top_contrib[1:nterm]], stringsAsFactors=F) %>%
filter(score_contrib > 0) %>%
cbind(rank = i, match = colnames(tdm.2)[idx_top[i]])
}
rbind_all(outlist)
}
best()
best <- function(nmatch = 3, nterm = 5){
v.q <- query.vec.norm
outlist <- list()
for(i in 1:nmatch){
#colnames(tdm.2)[idx_top[i]]
#idx_top[nmatch]
v.j <- mat.1[,idx_top[i]]
v <- v.j*v.q
#length(v)
top_contrib <- order(v, decreasing = T)
outlist[[i]] <- data.frame(term=dictionary[top_contrib[1:nterm]], # tdm.2$dimnames$Terms[top_contrib[1]]
score_contrib=v[top_contrib[1:nterm]], stringsAsFactors=F) %>%
filter(score_contrib > 0) %>%
data.frame(rank = i, match = colnames(tdm.2)[idx_top[i]], stringsAsFactors = F)
}
rbind_all(outlist)
}
best()
best <- function(nmatch = 3, nterm = 5){
v.q <- query.vec.norm
outlist <- list()
for(i in 1:nmatch){
#colnames(tdm.2)[idx_top[i]]
#idx_top[nmatch]
v.j <- mat.1[,idx_top[i]]
v <- v.j*v.q
#length(v)
top_contrib <- order(v, decreasing = T)
outlist[[i]] <- data.frame(term=dictionary[top_contrib[1:nterm]], # tdm.2$dimnames$Terms[top_contrib[1]]
score_contrib=v[top_contrib[1:nterm]], stringsAsFactors=F) %>%
filter(score_contrib > 0) %>%
data.frame(rank = i, match = colnames(tdm.2)[idx_top[i]], total_score = sum(v), stringsAsFactors = F)
}
rbind_all(outlist)
}
best()
best(nmatch = 15)
head(dictionary, 100)
best(nmatch = 15, nterm = 10)
query.vec.1 <- TermDocumentMatrix(Corpus(VectorSource('i would like to go to the green park on monday')),
control = list(dictionary = dictionary,wordLengths=c(1, Inf)))
query.vec.norm <- as.matrix(query.vec.1)/sqrt(sum(query.vec.1^2))
#query.vec.norm <- weightSMART(query.vec.1, spec='ntc', control = list(dictionary = dictionary))
aa <- t(mat.1)%*%query.vec.norm
# Output del query
idx_top <- order(aa, decreasing=T)
out <- d[idx_top,] %>%
select(Word, id, Def) %>%
cbind(score = sort(aa,decreasing = T)) %>%
filter(score > 0)
res <- out %>% head(15)
m <- data.frame(min=min(res$score))
# Estadísticas. Son sobresalientes las palabras que mostramos?
ggplot() +
geom_bar(data=out, mapping=aes(x=score)) +
geom_vline(data=res, aes(xintercept=min(score)), color='red')
View(res)
best(nmatch = 15, nterm = 10)
best(nmatch = 15, nterm = 10) %>% View
best <- function(nmatch = 3, nterm = 5){
v.q <- query.vec.norm
outlist <- list()
for(i in 1:nmatch){
#colnames(tdm.2)[idx_top[i]]
#idx_top[nmatch]
v.j <- mat.1[,idx_top[i]]
v <- v.j*v.q
#length(v)
top_contrib <- order(v, decreasing = T)
outlist[[i]] <- data.frame(term=dictionary[top_contrib[1:nterm]], # tdm.2$dimnames$Terms[top_contrib[1]]
score_contrib=v[top_contrib[1:nterm]], stringsAsFactors=F) %>%
filter(score_contrib > 0) %>%
data.frame(rank = i, match = colnames(tdm.2)[idx_top[i]], total_score = sum(v), stringsAsFactors = F)
}
rbind_all(outlist)[c(3,4,5,1,2)]
}
best(nmatch = 15, nterm = 10) %>% View
