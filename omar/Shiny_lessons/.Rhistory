splines_boot <- ggplot(toy, aes(x = x, y = y))
for(i in 1:100){
splines_boot <- splines_boot +
stat_function(fun = mu, arg = list(betas = betas[i, ]), alpha = 0.1)
}
splines_boot + geom_point(color = "red")
amex<-2162
amex<-2162
bbva<-1934
deb<-3817
2796-amex
1979-1934
17744-3817
2162*2
1934*2
11981-3817
3867-3817
load("~/Desktop/Gravity/GE.RData")
df[110,]
summary(model)
model
library(pryr)
library(dplyr)
library(ggplot2)
comprimir_nv <- function(x,a,b){
n <- length(x)
for(i in 1:n){
if (x[i] < a) { x[i]  <- a}
if (x[i] > b) { x[i]  <- b}
}
return(x)
}
comprimir_v  <- function(x,a,b){
return(replace(replace(x,x<a,a),x>b,b))
}
set.seed(1)
x<-rnorm(10)*10
sort(x)
a <- -6
b <- 3
microbenchmark(nv <- comprimir_nv(x,a,b), v <- comprimir_v(x,a,b), times=20)
identical(nv, v)
library("microbenchmark", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
microbenchmark(nv <- comprimir_nv(x,a,b), v <- comprimir_v(x,a,b), times=20)
identical(nv, v)
microbenchmark(nv <- comprimir_nv(x,a,b), v <- comprimir_v(x,a,b), times=20)
identical(nv, v)
x<-rnorm(1000)*10
sort(x)
a <- min(x)-100
a
a <- min(x)+100
min(x)
a <- min(x)+10
a
max(s)
max(x)
set.seed(1)
x<-rnorm(1000)*10
sort(x)
min(x)
max(x)
a <- min(x)+5
b <- max(x)-5
print(a,b)
a
b
microbenchmark(nv <- comprimir_nv(x,a,b), v <- comprimir_v(x,a,b), times=20)
identical(nv, v)
library(parallel)
library(pROC)
library(boot)
library(glmnet)
library(caret)
gravity <- read.csv("~/Documents/Gravity/gravity.csv")
attach(gravity)
logit <- glm(Y2~BC_SCORE + CCI,
family = binomial, data = gravity)
outcome<-predict(logit,gravity,type=c('response'))
rocobj <- plot.roc(Y2, outcome,  main="Confidence intervals", percent=TRUE,  ci=TRUE, # compute AUC (of AUC by default)
print.auc=TRUE) # print the AUC (will contain the CI)
logit_np<-system.time(B1 <- cv.glm(data=gravity, glmfit=logit, K=10))
B1$delta
logit_np
as.data.frame(logit_np)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
set.seed(825)
logit_p <- system.time(glmFit1 <- train(Y2 ~ BC_SCORE + CCI, data = gravity,
method = "glm",
trControl = fitControl))
glmFit1
logit_np
logit_p
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("arules")
library("arules", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
h.1 <- function(x){ (2*x + 4) %% 5}
h.2 <- function(x){ (3*x - 1) %% 5}
h.1(0)
h.2(0)
h.2(1)
h.2(0)
6%%5
4%%5
4/5
res(4/5)
residual(4/5)
y <- 1
h.1(y)
h.2(y)
y <- 2
h.1(y)
h.2(y)
h.2 <- function(x){ (3*x + 1) %% 5}
y <- 2
h.1(y)
h.2(y)
y <- 3
h.1(y)
h.2(y)
y <- 4
h.1(y)
h.2(y)
h.1 <- function(x){ 2*x + 4 %% 5}
h.2 <- function(x){ 3*x + 1 %% 5}
y <- 4
h.1(y)
h.2(y)
h.1 <- function(x){ (2*x + 4) %% 5}
y <- 0
h.1(y)
h.1 <- function(x){ 2*x + (4 %% 5)}
h.2 <- function(x){ 3*x + (1 %% 5)}
y <- 0
h.1(y)
h.2(y)
y <- 0
h.1(y)
h.1 <- function(x){ 2*x + 4 %% 5}
h.2 <- function(x){ 3*x + 1 %% 5}
y <- 0
h.1(y)
h.2(y)
h.1 <- function(x){ x + 1 %% 5}
h.2 <- function(x){ 3*x + 1 %% 5}
y <- 0
h.1(y)
h.2(y)
y <- 1
h.1(y)
h.2(y)
y <- 2
h.1(y)
h.2(y)
y <- 1
h.1(y)
h.2(y)
y <- 2
h.1(y)
h.2(y)
7%%5
h.1 <- function(x){ (x + 1) %% 5}
h.2 <- function(x){ (3*x + 1) %% 5}
y <- 2
h.1(y)
h.2(y)
y <- 3
h.1(y)
h.2(y)
y <- 4
h.1(y)
h.2(y)
install.packages("twitteR")
library(twitteR)
fav = favorites("barackobama", n=100)
woeid = availableTrendLocations[1, "woeid"]t1 <- getTrends(woeid)
getTrends(period="daily")
require(twitteR)
getTrends(period="daily")
require(twitteR)
getTrends(period="daily")
load("~/Dropbox/ITAM_Master/Metodos_Analiticos/Primer_parcial/datos_parcial.RData")
sim900
docs.sim
sim900 %>%
arrange(word_id) %>%
group_by(word) %>%
summarise(aparece_en=n())
library(dplyr)
library(Rcpp)
library(Matrix)
library(irlba)
library(ggplot2)
sim900 %>%
arrange(word_id) %>%
group_by(word) %>%
summarise(aparece_en=n())
head(mat.hashed)
dim(mat.hashed)
dim(firmas.b)
split(data.frame((firmas.b)), rep(1:8, each=2))
mejores20
filter(compara,aparece_en ==2)
nrow(comapra)
nrow(compara)
as.data.frame(clus1)
as.data.frame(clus2)
as.data.frame(clus1)[1:50,]
datos_fechas <- dat.2
datos_fechas$caso <- 1:nrow(datos_fechas)
enero_00 <- tail(filter(datos_fechas,fecha=="2000-01-31"),n=1)$caso
lista <- list()
c <- 0.001
for(i in 1:enero_00){
dato <- vistas[i]
peli <- as.character(dato)
valor.peli <- lista[[peli]]
lista <- lapply(lista, function(x){ x*(1-c) })
if(is.null(valor.peli)){
lista[[peli]] <- c
} else {
lista[[peli]] <- valor.peli + c
}
lista <- Filter( function(x){ x >= c/2}, lista)
}
#hasta enero del 2000, las peliculas mas populares son
peli.scores_01_2000 <- data.frame(peli_id = as.integer(names(lista)), score= Reduce('c', lista)) %>%
left_join(pelis.nombres) %>% arrange(desc(score))
peli.scores_01_2000
# las peliculas mas populares en junio 2000 son
datos_fechas <- dat.2
datos_fechas$caso <- 1:nrow(datos_fechas)
junio <- tail(filter(datos_fechas,fecha=="2000-06-30"),n=1)$caso
lista <- list()
c <- 0.001
for(i in 1:junio){
dato <- vistas[i]
peli <- as.character(dato)
valor.peli <- lista[[peli]]
lista <- lapply(lista, function(x){ x*(1-c) })
if(is.null(valor.peli)){
lista[[peli]] <- c
} else {
lista[[peli]] <- valor.peli + c
}
lista <- Filter( function(x){ x >= c/2}, lista)
}
peli.scores_06_2000 <- data.frame(peli_id = as.integer(names(lista)), score= Reduce('c', lista)) %>%
left_join(pelis.nombres) %>% arrange(desc(score))
peli.scores_06_2000
#hasta enero del 2001, las peliculas mas populares son
datos_fechas <- dat.2
datos_fechas$caso <- 1:nrow(datos_fechas)
enero_01 <- tail(filter(datos_fechas,fecha=="2001-01-30"),n=1)$caso
lista <- list()
c <- 0.001
for(i in 1:enero_01){
dato <- vistas[i]
peli <- as.character(dato)
valor.peli <- lista[[peli]]
lista <- lapply(lista, function(x){ x*(1-c) })
if(is.null(valor.peli)){
lista[[peli]] <- c
} else {
lista[[peli]] <- valor.peli + c
}
lista <- Filter( function(x){ x >= c/2}, lista)
}
peli.scores_01_2001 <- data.frame(peli_id = as.integer(names(lista)), score= Reduce('c', lista)) %>%
left_join(pelis.nombres) %>% arrange(desc(score))
peli.scores_01_2001
save.image("~/Dropbox/ITAM_Master/Metodos_Analiticos/Primer_parcial/datos_parcial.RData")
head(fac.pers)
head(factores.peliculas)
factores.peliculas %>%
arrange(X4) %>%
select(movie_nom,tipo)
factores.peliculas %>%
arrange(X4) %>%
select(movie_nom,tipo) %>%
filter(row_number(tipo)<=10)
factores.peliculas %>%
arrange(X2) %>%
select(movie_nom,tipo) %>%
filter(row_number(tipo)<=10)
caso_6000[1:15,c(3,4)]
caso_6000
head(caso_6000)
head(dat.pred)
peli.scores_01_2000
head(peli.scores_01_2000)
peli.scores_01_2000[1:15,]
clus1
install.packages("wordcloud")
wordcloud(clus1$V1,clus1$n_tot,
scale=c(4,.5),
random.order=FALSE,
rot.per=.1,
colors=colorRampPalette(brewer.pal(9,"Set3"))(length(clus1$V1)),
ordered.colors=TRUE)
library(wordcloud)
wordcloud(clus1$V1,clus1$n_tot,
scale=c(4,.5),
random.order=FALSE,
rot.per=.1,
colors=colorRampPalette(brewer.pal(9,"Set3"))(length(clus1$V1)),
ordered.colors=TRUE)
clus1_wc <- as.data.frame(clus1)[1:50,]
wordcloud(clus1_wc$V1,clus1_wc$n_tot,
scale=c(4,.5),
random.order=FALSE,
rot.per=.1,
colors=colorRampPalette(brewer.pal(9,"Set3"))(length(clus1_wc$V1)),
ordered.colors=TRUE)
wordcloud(clus1_wc$V1,clus1_wc$n_tot,
scale=c(4,.5),
random.order=FALSE,
rot.per=.1,
colors=colorRampPalette(brewer.pal(9,"Set1"))(length(clus1_wc$V1)),
ordered.colors=TRUE)
clus2_wc <- as.data.frame(clus2)[1:50,]
wordcloud(clus2_wc$V1,clus2_wc$n_tot,
scale=c(4,.5),
random.order=FALSE,
rot.per=.1,
colors=colorRampPalette(brewer.pal(9,"Set1"))(length(clus2_wc$V1)),
ordered.colors=TRUE)
as.data.frame(clus2)[1:50,]
clus3_wc <- as.data.frame(clus3)[1:50,]
wordcloud(clus3_wc$V1,clus3_wc$n_tot,
scale=c(4,.5),
random.order=FALSE,
rot.per=.1,
colors=colorRampPalette(brewer.pal(9,"Set1"))(length(clus3_wc$V1)),
ordered.colors=TRUE)
class(caso_6000[1:15,c(3,4)])
caso_6000[1:15,c(3,4)]
Hoja1.Table.1 <- read.csv("~/Documents/analisis_tesis/PIB_SALUD_MARG_REC/Hoja1-Table 1.csv")
View(Hoja1.Table.1)
datos <- read.csv("~/Documents/analisis_tesis/PIB_SALUD_MARG_REC/Hoja1-Table 1.csv")
rm(Hoja1.Table.1)
colnames(datos)
colnames(datos) <- c("Year","PIB (2008)", "Salud (2008)", "Marg (2008)", "Rec (2008)")
head(datos)
colnames(datos) <- c("Year","PIB_2008", "Salud_2008", "Marg_2008", "Rec_2008")
head(datos)
ggplot(datos,aes(x=Year,y=PIB_2008))+
geom_line()
library(ggplot2)
ggplot(datos,aes(x=Year,y=PIB_2008))+
geom_line()
ggplot(datos)+
geom_line(aes(x=Year,y=PIB_2008))+
geom_line(aes(x=Year,y=Salud_2008))
scaled.dat[,-1]
datos[,-1]
scale(datos[,-1])
colMeans(scale(datos[,-1]))  # faster version of apply(scaled.dat, 2, mean)
apply(scale(datos[,-1]), 2, sd)
datos_sd <- cbind(datos$Year,scale(datos[,-1]))
head(datos_sd)
datos_sd <- cbind(Year=datos$Year,scale(datos[,-1]))
head(datos_sd)
datos$PIB_2008-mean(datos$PIB_2008)
(datos$PIB_2008-mean(datos$PIB_2008))/sd(datos$PIB_2008)
((datos$PIB_2008-mean(datos$PIB_2008))/sd(datos$PIB_2008))-datos_sd$PIB_2008
datos_sd$PIB_2008
datos_sd <- as.data.frame(cbind(Year=datos$Year,scale(datos[,-1])))
((datos$PIB_2008-mean(datos$PIB_2008))/sd(datos$PIB_2008))-datos_sd$PIB_2008
ggplot(datos_sd)+
geom_line(aes(x=Year,y=PIB_2008))+
geom_line(aes(x=Year,y=Salud_2008))
ggplot(datos_sd)+
geom_line(aes(x=Year,y=PIB_2008))+
geom_line(aes(x=Year,y=Salud_2008))+
geom_line(aes(x=Year,y=Marg_2008)) +
geom_line(aes(x=Year,y=Rec_2008))
ggplot(datos_sd)+
geom_line(aes(x=Year,y=PIB_2008),color=red)+
geom_line(aes(x=Year,y=Salud_2008))+
geom_line(aes(x=Year,y=Marg_2008)) +
geom_line(aes(x=Year,y=Rec_2008))
ggplot(datos_sd)+
geom_line(aes(x=Year,y=PIB_2008),color="red")+
geom_line(aes(x=Year,y=Salud_2008))+
geom_line(aes(x=Year,y=Marg_2008)) +
geom_line(aes(x=Year,y=Rec_2008))
ggplot(datos_sd)+
geom_line(aes(x=Year,y=PIB_2008),color="red")+
geom_line(aes(x=Year,y=Salud_2008),color="blue")+
geom_line(aes(x=Year,y=Marg_2008)) +
geom_line(aes(x=Year,y=Rec_2008))
ggplot(datos_sd)+
geom_line(aes(x=Year,y=PIB_2008),color="red")+
geom_line(aes(x=Year,y=Salud_2008),color="blue")+
geom_line(aes(x=Year,y=Marg_2008)) +
geom_line(aes(x=Year,y=Rec_2008),color="green")
datos_sd$Salud_2008
datos_sd[,c(1,3)]
ggplot(datos_sd)+
geom_line(aes(x=Year,y=PIB_2008),color="red")+
geom_line(aes(x=Year,y=Salud_2008),color="blue")+
geom_line(aes(x=Year,y=Marg_2008))
ggplot(datos)+
geom_line(aes(x=Year,y=Salud_2008),color="blue")
datos <- read.csv("~/Documents/analisis_tesis/PIB_SALUD_MARG_REC/Hoja1-Table 1.csv")
colnames(datos) <- c("Year","PIB_2008",
"Salud_2008","Marg_2008",
"Rec_2008")
ggplot(datos)+
geom_line(aes(x=Year,y=Salud_2008),color="blue")
datos <- read.csv("~/Documents/analisis_tesis/PIB_SALUD_MARG_REC/Hoja1-Table 1.csv")
head(datos)
colnames(datos) <- c("Year","PIB_2008",
"Salud_2008","Marg_2008",
"Rec_2008")
datos_sd <- as.data.frame(cbind(Year=datos$Year,scale(datos[,-1])))
ggplot(datos_sd)+
geom_line(aes(x=Year,y=PIB_2008),color="red")+
geom_line(aes(x=Year,y=Salud_2008),color="blue")+
geom_line(aes(x=Year,y=Marg_2008))
ggplot(datos_sd)+
geom_line(aes(x=Year,y=PIB_2008),color="red")+
geom_line(aes(x=Year,y=Salud_2008),color="blue")+
geom_line(aes(x=Year,y=Marg_2008)) +
geom_line(aes(x=Year,y=Rec_2008),color="green")
install.packages("urca")
library(urca)
data(zeroyld)
install.packages("tsDyn")
library(tsDyn)
data(zeroyld)
data<-zeroyld
#Fit a VECM with Engle-Granger 2OLS estimator:
vecm.eg<-VECM(zeroyld, lag=2)
vecm.eg
vecm.jo<-VECM(zeroyld, lag=2, estim="ML")
vecm.jo
if(require(vars)) {
data(finland)
#check long coint values
all.equal(VECM(finland, lag=2, estim="ML", r=2)$model.specific$beta,
cajorls(ca.jo(finland, K=3, spec="transitory"), r=2)  $beta, check.attributes=FALSE)
# check OLS parameters
all.equal(t(coefficients(VECM(finland, lag=2, estim="ML", r=2))),
coefficients(cajorls(ca.jo(finland, K=3, spec="transitory"), r=2)$rlm), check.attributes=FALSE)
}
summary(vecm.jo)
datos <- read.csv("~/Documents/analisis_tesis/PIB_SALUD_MARG_REC/Hoja1-Table 1.csv")
colnames(datos) <- c("Year","PIB_2008",
"Salud_2008","Marg_2008",
"Rec_2008")
head(datos)
datos_sd <- as.data.frame(cbind(Year=datos$Year,scale(datos[,-1])))
library(ggplot2)
library(urca)
library(tsDyn)
datos_sd <- as.data.frame(cbind(Year=datos$Year,scale(datos[,-1])))
ggplot(datos_sd)+
geom_line(aes(x=Year,y=PIB_2008),color="red")+
geom_line(aes(x=Year,y=Salud_2008),color="blue")+
geom_line(aes(x=Year,y=Marg_2008)) +
geom_line(aes(x=Year,y=Rec_2008),color="green")
ggplot(datos_sd)+
geom_line(aes(x=Year,y=PIB_2008),color="red")
x <- sample(1:20,10)
x
w <- 1+log(x)
w
log(17)
log(17)+1
cbind(x,w)
f <- as.data.frame(cbind(x,w))
f
sort(f,x)
sort(f)
sort(f,decreasing=FALSE)
f %>%
f
f[order(x),]
install.packages("shiny")
library(shiny)
runExample("01_hello")
setwd("~/Desktop/Shiny")
runApp("my_app")
runExample("01_hello")
runApp("my_app")
runExample("01_hello")
runApp("Shiny")
setwd("~/Desktop")
runApp("Shiny")
runApp("Shiny")
runApp("Shiny",display.mode="showcase")
shiny::runApp('Shiny')
shiny::runApp('Shiny')
setwd("~/Desktop/Shiny_lessons")
system.file("examples", package="shiny")
runExample("02_text") # tables and data frames
runExample("03_reactivity") # a reactive expression
runExample("04_mpg")
runExample("05_sliders")
runExample("06_tabsets")
runExample("02_text") # tables and data frames
runExample("07_widgets") # help text and submit buttons
runExample("08_html") # Shiny app built from HTML
runExample("09_upload") # file upload wizard
runExample("11_timer") # an automated timer
runExample("06_tabsets") # tabbed panels
